package com.smartinvent.controller;


import com.smartinvent.models.DatabaseConfig;
import com.smartinvent.service.DatabaseInitializationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.sql.DataSource;

/**
 * –ö–ª–∞—Å-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤, –ø–æ–≤'—è–∑–∞–Ω–∏—Ö –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
 */
@RestController
@RequestMapping("/api")
@Slf4j
@RequiredArgsConstructor
public class DatabaseController {

    /**
     * –û–±'—î–∫—Ç —Å–µ—Ä–≤—ñ—Å—É –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
     */
    private final DatabaseInitializationService databaseService;

    /**
     * –û–±'—î–∫—Ç –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö
     */
    private final DataSource dataSource;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—É
     *
     * @param dataSource      - –¥–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö
     * @param databaseService - —Å–µ—Ä–≤—ñ—Å –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
     */
    @Autowired
    public DatabaseController(DataSource dataSource, DatabaseInitializationService databaseService) {
        this.dataSource = dataSource;
        this.databaseService = databaseService;
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
     *
     * @param config - –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
     * @return - –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
     */
    @PostMapping("/testConnection")
    public ResponseEntity<String> testDbConnection(@RequestBody DatabaseConfig config) {
        System.out.println("DatabaseController testDbConnection ");

        log.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {}", config);
        boolean success = databaseService.testConnection(config);
        return success ? ResponseEntity.ok("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!") : ResponseEntity.badRequest().body("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è!");
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
     *
     * @param config - –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
     * @return - –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
     */
    @PostMapping("/setupDatabase")
    public ResponseEntity<String> setupDatabase(@RequestBody DatabaseConfig config) {
        System.out.println("DatabaseController setupDatabase ");
        databaseService.initializeDatabase(config);
        return ResponseEntity.ok("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!");
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞–±–ª–∏—Ü—å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
     *
     * @param config - –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
     * @return - –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞–±–ª–∏—Ü—å
     */
    @PostMapping("/checkTables")
    public ResponseEntity<Boolean> checkTables(@RequestBody DatabaseConfig config) {
        boolean tablesExist = databaseService.checkTables(config);
        return ResponseEntity.ok(tablesExist);
    }
}


//
//        if (dataSource instanceof HikariDataSource hikariDataSource) {
//            if (hikariDataSource.isClosed()) {
//                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
//                        .body("–ü–æ–º–∏–ª–∫–∞: DataSource –∑–∞–∫—Ä–∏—Ç–∏–π!");
//            }
//        }
//
//        try (Connection connection = dataSource.getConnection()) {
//            if (connection.isValid(2)) {
//                return ResponseEntity.ok("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!");
//            } else {
//                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
//                        .body("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î!");
//            }
//        } catch (SQLException e) {
//            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
//                    .body("–ü–æ–º–∏–ª–∫–∞ SQL: " + e.getMessage());
//        }
//    }


//    @PostMapping("/clearDatabase")
//    public ResponseEntity<String> clearDatabase(@RequestBody DatabaseConfig config) {
//        System.out.println("DatabaseController clearDatabase ");
//
//
//        databaseService.clearDatabase();
//        return ResponseEntity.ok("‚úÖ –¢–∞–±–ª–∏—Ü—ñ –æ—á–∏—â–µ–Ω—ñ!");
//    }


//

//
//
//package com.smartinvent.controller;
//
//import com.smartinvent.models.DatabaseConfig;
//import com.smartinvent.service.DatabaseService;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.http.HttpStatus;
//import org.springframework.http.ResponseEntity;
//import org.springframework.web.bind.annotation.*;
//
//@RestController
//@RequestMapping("/api")
//public class DatabaseController {
//
//    private static final Logger logger = LoggerFactory.getLogger(DatabaseController.class);
//
//    private final DatabaseService databaseService;
//
//    @Autowired
//    public DatabaseController(DatabaseService databaseService) {
//        this.databaseService = databaseService;
//    }
//
//    @PostMapping("/testConnection")
//    public ResponseEntity<?> testDbConnection(@RequestBody DatabaseConfig config) {
//        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç testConnection –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é: {}", config);
//        return ResponseEntity.ok("Connection successful!");
//    }
//
//    @PostMapping("/initializeDatabase")
//    public ResponseEntity<?> initializeDatabase() {
//        try {
//            databaseService.initializeDatabase();
//            return ResponseEntity.ok("Database initialized successfully!");
//        } catch (Exception e) {
//            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
//                    .body("Database initialization failed: " + e.getMessage());
//        }
//    }
//}

